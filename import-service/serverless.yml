service: import-service
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 512
  timeout: 10
  stage: dev
  region: ${env:REGION}
  profile: serverless
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    REGION: ${env:REGION}
    IMPORT_BUCKET_NAME: ${env:IMPORT_BUCKET_NAME}
    AWS_ACCOUNT_ID:
      Ref: AWS::AccountId
    SQS_URL: ${cf:product-service-${self:provider.stage}.ProductSQSQueueUrl}
  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource:
        - ${env:IMPORT_BUCKET_ARN}
    - Effect: "Allow"
      Action: "s3:*"
      Resource:
        - ${env:IMPORT_BUCKET_ARN}/*
    - Effect: "Allow"
      Action: "sqs:*"
      Resource: ${cf:product-service-${self:provider.stage}.ProductSQSQueueArn}

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  
functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          method: GET
          path: import
          request:
            parameters:
              querystrings:
                name: true
          cors:
            origin: "https://dm9otfstrcg58.cloudfront.net"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            name: basicAuthorizer
            arn: ${cf:authorization-service-${self:provider.stage}.BasicAuthorizerArn}
            resultTtlInSeconds: 0
            indentitySource: method.request.header.Authorization
            type: token

  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: ${env:IMPORT_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true